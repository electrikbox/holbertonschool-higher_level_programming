Base geometry integer validator
==========================

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

	>>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator(None, "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] unsupported operand type(s) for +: 'NoneType' and 'str'

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name", float('inf'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] nan must be an integer

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name", -1)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0

------------------------------------------------------------------------

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer

------------------------------------------------------------------------

    >>> try:
    ...     bg.integer_validator("name", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

------------------------------------------------------------------------

    >>> bg.integer_validator("numbers", 0, 1)
    Traceback (most recent call last):
    TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given



    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] inf_float must be an integer



    >>> try:
    ...     bg.integer_validator("name", (4, ))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer



    >>> try:
    ...     bg.integer_validator("name", [])
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer



    >>> try:
    ...     bg.integer_validator("name", {3, 4})
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer



    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer



    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0
